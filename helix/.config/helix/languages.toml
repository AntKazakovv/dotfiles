[language-server]
emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}

[[language]]
name = "rust"

[[grammar]]
name = "rust"
source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "0431a2c60828731f27491ee9fdefe25e250ce9c9" }

[language-server.angular]
command = "ngserver"
args = [
  "--stdio",
  "--tsProbeLocations",
  "$(npm -g root)",
  "--ngProbeLocations",
  "$(npm -g root)",
]

[[language]]
name = "angular"
scope = "source.angular"
roots = ["angular.json"]
language-server = { command = "ngserver", args = ["--stdio", "--tsProbeLocations", "$(npm -g root)", "--ngProbeLocations", "$(npm -g root)"] }
file-types = ["ts", "html"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language-server.biome]
command = "npx"
args = ["@biomejs/biome", "lsp-proxy", "--config-path", "/home/antonkazakov/.config/biome/biome.jsonc"]
display-messages = false

[language-server.gpt]
command = "helix-gpt"

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "npm"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionsOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

# [language-server.prettier]
# command = "npx"
# args = [
#   "prettier",
#   "--write",
#   "--parser",
#   "typescript",
#   "--config",
#   "~/.config/prettier/prettier.config.js"
# ]

[[language]]
name = "typescript"
formatter = { command = 'prettier-run' }
roots = ["tsconfig.json"]
auto-format = false
language-servers = [
  { name = "biome" },
  { name = "vscode-css-language-server"},
  { name = "typescript-language-server", except-features = ["format"]},
  "angular",
  "eslint",
  # "gpt"
]

[language.debugger]
name = "ts-debugger"
transport = "tcp"         # или "stdio"
command = "js-debug"
args = ["--node-debugger"]


[[language.debugger.templates]]
name = "Launch JS (js-debug)"
request = "launch"
completion = [
  { name = "entrypoint", completion = "filename", default = "index.js" }
]
args = { mode = "debug", program = "{0}", args = ["-r", "192.168.40.180", "-p", "8080", "-d", "60"] }

[[language]]
name = "html"
# formatter = { command = 'prettier', args = [
#   "--write",
#   "--parser",
#   "html",
#   "--config",
#   "/home/anton/.prettier/.prettierrc"
# ] }

## Biome:
# ==>
# formatter = { command = 'npx', args = [
#   "@biomejs/biome",
#   "format",
#   "--write",
#   "--config-path",
#   "~/.config/biome/biome.jsonc",
#   "--stdin-file-path"
# ] }
formatter = { command = 'prettier-run-html' }
auto-format = false
indent = { tab-width = 4, unit = "    " }
language-servers = [
  "vscode-html-language-server",
  "angular",
  "emmet-ls",
]

[[language]]
name = "scss"
auto-format = false
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "json"
auto-format = true
indent = { tab-width = 4, unit = "    " }

# LSP AI
[language-server.lsp-ai]
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

[language-server.lsp-ai.config.models.model1]
type = "open_ai"
chat_endpoint = "https://api.openai.com/v1/chat/completions"
model = "gpt-4o-mini"
auth_token = "$GPT_AUTH_TOKEN"

# [language-server.lsp-ai.config.completion]
# model = "model1"

# [language-server.lsp-ai.config.completion.parameters]
# max_tokens = 64
# max_context = 1024

[[language-server.lsp-ai.config.chat]]
trigger = "!C"
action_display_name = "Chat AI"
model = "model1"

[language-server.lsp-ai.config.chat.parameters]
max_context = 4096
max_tokens = 1024

[[language-server.lsp-ai.config.chat.parameters.messages]]
role = "system"
content = "You are a code assistant chatbot. The user will ask you for assistance coding and you will do your best to answer succinctly and accurately"


[[language]]
name = "php"
language-servers = [ "intelephense" ]
auto-format = true
