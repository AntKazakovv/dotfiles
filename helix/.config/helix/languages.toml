# =========== LSP-AI ================

[language-server.lsp-ai]
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

[[language-server.lsp-ai.config.chat]]
trigger = "!C"
action_display_name = "Chat"
model = "model1"

[language-server.lsp-ai.config.models.model1]
type = "open_ai"
chat_endpoint = "http://localhost:1234/v1"
model =  "gemma-3n-e4b-it-mlx"
# auth_token_env_var_name = ""

[language-server.lsp-ai.config.completion]
model = "model1"

[language-server.lsp-ai.config.completion.parameters]
max_tokens = 64
max_context = 1024

## Configure the messages per your needs
[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "system"
content = "Instructions:\n- You are an AI programming assistant.\n- Given a piece of code with the cursor location marked by \"<CURSOR>\", replace \"<CURSOR>\" with the correct code or comment.\n- First, think step-by-step.\n- Describe your plan for what to build in pseudocode, written out in great detail.\n- Then output the code replacing the \"<CURSOR>\"\n- Ensure that your completion fits within the language context of the provided code snippet (e.g., Python, JavaScript, Rust).\n\nRules:\n- Only respond with code or comments.\n- Only replace \"<CURSOR>\"; do not include any previously written code.\n- Never include \"<CURSOR>\" in your response\n- If the cursor is within a comment, complete the comment meaningfully.\n- Handle ambiguous cases by providing the most contextually appropriate completion.\n- Be consistent with your responses."

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "def greet(name):\n    print(f\"Hello, {<CURSOR>}\")"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "name"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "function sum(a, b) {\n    return a + <CURSOR>;\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "fn multiply(a: i32, b: i32) -> i32 {\n    a * <CURSOR>\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# <CURSOR>\ndef add(a, b):\n    return a + b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "Adds two numbers"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# This function checks if a number is even\n<CURSOR>"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "def is_even(n):\n    return n % 2 == 0"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "{CODE}"


#################################
## Configuration for languages ##
#################################

# ===========================================================


[language-server]
emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}

[[language]]
name = "rust"

[[grammar]]
name = "rust"
source = { git = "https://github.com/tree-sitter/tree-sitter-rust", rev = "0431a2c60828731f27491ee9fdefe25e250ce9c9" }

[language-server.angular]
command = "ngserver"
args = [
  "--stdio",
  "--tsProbeLocations",
  "$(npm -g root)",
  "--ngProbeLocations",
  "$(npm -g root)",
]

[[language]]
name = "angular"
scope = "source.angular"
roots = ["angular.json"]
file-types = ["ts", "html"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.vscode-css-language-server]
command = "vscode-css-language-server"
args = ["--stdio"]

[language-server.biome]
command = "npx"
args = ["@biomejs/biome", "lsp-proxy", "--config-path", "/home/antonkazakov/.config/biome/biome.jsonc"]
display-messages = false

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "npm"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionsOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

# [language-server.prettier]
# command = "npx"
# args = [
#   "prettier",
#   "--write",
#   "--parser",
#   "typescript",
#   "--config",
#   "~/.config/prettier/prettier.config.js"
# ]

[[language]]
name = "typescript"
formatter = { command = 'prettier-run' }
roots = ["tsconfig.json"]
auto-format = false
language-servers = [
  { name = "biome" },
  { name = "vscode-css-language-server"},
  { name = "typescript-language-server", except-features = ["format"]},
  "angular",
  "eslint",
  "lsp-ai"
]

[language.debugger]
name = "ts-debugger"
transport = "tcp"         # или "stdio"
command = "js-debug"
args = ["--node-debugger"]


[[language.debugger.templates]]
name = "Launch JS (js-debug)"
request = "launch"
completion = [
  { name = "entrypoint", completion = "filename", default = "index.js" }
]
args = { mode = "debug", program = "{0}", args = ["-r", "192.168.40.180", "-p", "8080", "-d", "60"] }

[[language]]
name = "html"
# formatter = { command = 'prettier', args = [
#   "--write",
#   "--parser",
#   "html",
#   "--config",
#   "/home/anton/.prettier/.prettierrc"
# ] }

## Biome:
# ==>
# formatter = { command = 'npx', args = [
#   "@biomejs/biome",
#   "format",
#   "--write",
#   "--config-path",
#   "~/.config/biome/biome.jsonc",
#   "--stdin-file-path"
# ] }
formatter = { command = 'prettier-run-html' }
auto-format = false
indent = { tab-width = 4, unit = "    " }
language-servers = [
  "vscode-html-language-server",
  "angular",
  "emmet-ls",
]

[[language]]
name = "scss"
auto-format = false
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "json"
auto-format = true
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "php"
language-servers = [ "intelephense" ]
auto-format = true

[language-server.intelephense]
command = "intelephense"
args = ["--stdio"]

[language-server.intelephense.config.intelephense]
stubs = [
    "apache", "bcmath", "bz2", "calendar", "com_dotnet", "Core", "ctype", "curl", "date",
    "dba", "dom", "enchant", "exif", "fileinfo", "filter", "fpm", "ftp", "gd", "hash",
    "iconv", "imap", "interbase", "intl", "json", "ldap", "libxml", "mbstring", "mcrypt",
    "mysql", "mysqli", "oci8", "odbc", "openssl", "pcntl", "pcre", "PDO", "pdo_ibm",
    "pdo_mysql", "pdo_pgsql", "pdo_sqlite", "pgsql", "Phar", "posix", "pspell", "readline",
    "recode", "Reflection", "regex", "session", "shmop", "SimpleXML", "snmp", "soap",
    "sockets", "sodium", "SPL", "sqlite3", "standard", "superglobals", "sysvmsg", "sysvsem",
    "sysvshm", "tidy", "tokenizer", "wddx", "xml", "xmlreader", "xmlrpc", "xmlwriter",
    "Zend OPcache", "zip", "zlib", "wordpress"
]
files.exclude = [
    "**/.git/**",
    "**/.svn/**",
    "**/.hg/**",
    "**/CVS/**",
    "**/.DS_Store/**",
    "**/node_modules/**",
    "**/bower_components/**",
    "**/vendor/**/{Test,test,Tests,tests}/**"
]


